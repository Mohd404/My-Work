# Jenkins master-slave building demo EC2:
Open our AWS EC2 Dashboard.
Create Jenkin_Server instance (Master).
Create Build_Server instance (Slave).
Connect to the systems using ssh.
Install same java version in both systems
Amazon-linux-extras install java-openjdk11
Check Java (JDK) version: java --version
Install Jenkins in Jenkins_Server: sudo yum install jenkins
Start Jenkins: sudo systemctl start jenkins
Open jenkins in port 8080 to config slave system.
Go  to Manage Nodes: 
Manage Jenkins --> Manage Nodes and Clouds --> New Node
Write the name and choose permanent Agent.
Number of executors: 2
Remote root directory: /opt/build
Labels: slave1-build-node
Usage:Use this node as much as possible
Launch method: Launch agent by connecting it to the master 
Custom WorkDir path: custom Remoting work directory will be used instead of the Agent Root Directory
- Use WebSocket [x]
Availability: Keep this agent online as much as possible
Apply and save it.
11. Update public IP address:
Manage jenkins--> Configure System--> Update the IP
12. Go to Agent slave1-node 
Install agent.jar file.
Copy the command from Agent slave1-node:
nohup java -jar agent.jar -jnlpUrl http://107.22.153.134:8080/manage/computer/slave1/jenkins-agent.jnlp -secret 28f5a06868415b00bf7994c43c28742b4ed0ca601527f1c78848661417fa5bb7 -workDir "/opt/build" &
Check if Agent is connected.
	13. To test it: Create a new job
Name: demo-job -->Freestyle project --> Ok
Restric where this project can be run: slave1
Build--> Execute shell --> uptime
 					echo $WORKSPACE
Apply and save it
In Build_Server: uptime 
Check job consalt output and compare the time
